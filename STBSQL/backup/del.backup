##################################################################
#  ShellQL Application by Cenk Kurt Jan 2014
#  Description:ShellQL is a simple SQL interface for flat files 
##################################################################
#  ShellQL
##################################################################
if ! [ -f $1.delim ];then                                             # Delimeter dosyası var mı kontrolu
     echo "ERR:310 Delimeter file not found:$3.delim"
     exit 1
fi
if ! [ -f $1.desc ];then                                              # Description dosyası var mı kontrolu
     echo "ERR:201 Description file not found"
     exit 1
fi
if ! [ -f $1.db ];then                                                # Data dosyası var mı kontrolu
     echo "ERR: 902 Table $3.db not found"
     exit 1
fi
##################################################################
del1=`cat $1.delim`                                                   # Table delimeter
case "$del1" in
       "WHITESPACE") del=" "
       ;;
       "TAB") del="	"
       ;;
       *) del=$del1
       ;;
esac
table=$1                                                              # Table adı
cond=$3" "$4" "$5" "$6" "$7                                           # WHERE condition
tabledb=$table.db
if [ ${2:-"~"} = "~" ];then
echo "burada 2"
   sayac=`cat $tabledb|wc -l`
   cp $tabledb $table.rollbackseg
   rm $tabledb
   touch $tabledb
   echo $sayac " rows deleted."
   exit
fi
        awkcond=`echo $cond |sed -e 's/!=/<>/g'|sed -e 's/ AND / \&\& /g'|sed -e 's/ OR / \|\| /g'|sed -e 's/=/==/g'|sed -e 's/<>/!=/g'`  # Where condition hazırlanıyor
        awkcond=`echo $awkcond |sed -e 's/ and / \&\& /g'|sed -e 's/ or / \|\| /g'`  # Where condition awk ın tanıyacağı hale getirilmek üzere hazırlanıyor lowercase'ler
        relcont=0
        for i in `cat $table.desc|cut -d ":" -f 2`                            # where condition daki kolonlar bulunuyor
         do
          col=$i
          sno=`cat $table.desc|grep -m 1 ":"${col}|awk -F ":" '{print $1}'`
          if [ ${sno:-"~" } = "~" ];then                                        # Where condition daki kolon adı repository de var mı kontrolü yapılıyor
             echo "ERR:301 Relational identifier not found:$col"
             exit 1
          fi
          awkcondcont=`echo $awkcond|tr '[:lower:]' '[:upper:]'`
          awkcond=`echo $awkcondcont|sed 's/'$col'/$'$sno'/g'`
          if [ $awkcondcont != $awkcond ];then                                   # Where conditiondaki kolon adı repsoitoryde varsa flag 1 oluyor
             relcont=1
          fi
         done
       if [ $relcont = 0 ];then
          echo "ERR:302 Relational identifier not found in:$cond"
          exit 1
       fi
       if [ ${2:-"~"} = "WHERE" ] || [ ${2:-"~"} = "where" ];then
          echo "cat $tabledb |awk -F \"${del}\" '{ if (!( $awkcond) )  print \$0;i++; }'" > d1.sh # SELECT ifadesi çalışıyor
       fi
       cp $table.db $table.rollbackseg                                           # Rollback Segmente update oncesi dosya yaziliyor
       sayac=`cat $table.rollbackseg|wc -l`
       . ./d1.sh > $table.db1                                                    # Hazırlanan awk komutu shell script olarak run ediliyor
       rm $table.db
       mv $table.db1 $table.db
       sayac1=`cat $table.db|wc -l`
       echo $(( sayac - sayac1 )) " rows deleted."
