#!/bin/ksh
################################################################
# Description :
#     STBSQL is the Simple Text Base SQL interface 
#     for querying and data manuplating on delimited text files.
################################################################
# History:
# Date       Desc                                    Edited by 
# ---------- --------------------------------------- -----------
# 02/02/2014 First beta version iss.                 Cenk Kurt
# 06/02/2014 Enhancements                            Cenk Kurt
# 09/02/2014 Delete statement                        Cenk Kurt
# 11/02/2014 Rollback and Commit                     Cenk Kurt
# 12/02/2014 Update statement                        Cenk Kurt
# 16/02/2014 Insert statement                        Cenk Kurt
# 17/02/2014 Create statement                        Cenk Kurt
# 21/02/2021 SUM/COUNT/AVG/MAX/MIN added on sel      Cenk Kurt
################################################################ 
. ./lib
########################
## ROUTINES
########################
error_exit()
{
  echo "$1" 1>&2 > $BIN/STDOUT.SESSIONID
  rm $SYS/loggeduser.user.$SESSIONID   
  cat $BIN/STDOUT.SESSIONID
  rm $BIN/STDOUT.SESSIONID 
}
Login () 
{
  count=1
  while [[ count -le 4 ]] 
     do
      if [ $count -gt 3 ];then
         echo "3 attempts falied. Access is denied."
         exit 1
      fi
    echo "Login as:"
    read USER
    echo "Password:"
    read -s PASS
    USER=${USER:-"..."}
    PASS=${PASS:-"..."}
    flag1=1
    flag2=1
    for i in `cat $SYS/passwd`
      do
       user=`echo $i|cut -d ":" -f 1`
       pass=`echo $i|cut -d ":" -f 2`
       if [ $user == $USER ];then 
          flag1=0;
       fi
       if [ $pass == $PASS ];then 
          flag2=0;
          count=5
       fi
      done
    if [ $flag1 != 0 ];then
       echo "User is invalid"
       echo "You are not logged in"
    fi
    if [ $flag2 != 0 ];then
       echo "Password is invalid"
       echo "You are not logged in"
    fi
    count=$(( $count + 1 ))
  done
  echo ""
  echo "You are logged in."
  SESSIONID=`cat $SYS/SEQ|awk '{ SESSION=$1+1 ; print SESSION }'`    #Session ID yaratılıyor
  export SESSIONID                                                   #Session ID export edildi diğer scriptler için
  echo  $SESSIONID>$SYS/SEQ
  echo "Session ID:"$SESSIONID
  echo  $USER > $SYS/loggeduser.user.$SESSIONID                  # Session ID ve login olan user ile SESSION dosyası $SYS folderında yaratılıyor
}
shutdown () 
{
  LOGGEDUSER=`cat $SYS/loggeduser.user.$SESSIONID`                #login olan user.$SESSIONID
  SYSUSER=`cat $SYS/dba.user|grep -i $LOGGEDUSER|wc -l`           #DBA user
  if [ $SYSUSER = 0 ];then
     echo "$USER user has no DBA permission."
  else
      sessioncount=0
      for i in $(find $SYS  -name "loggeduser.user.*" )
        do
         sessioncount=$sessioncount+1
        done              #Açık kalmış session var mı kontrolü, varsa session dosyası silinyor
     if [ $sessioncount > 0 ];then
        for i in $(find $SYS  -name "loggeduser.user.*" )
          do
           rm $i          #Açık kalan session dosyaları siliniyor 
          done      
     fi
     if [ -f $SYS/system ];then
        mv $SYS/system $SYS/_system
        echo "STBSQL database closed"
        sleep 1
     else
        echo "Database already closed."
     fi
  fi
}
selectstatement () 
{
 if [ -f $SYS/system ];then
    stmt=$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9" "$p10" "$p11" "$p12" "$p13" "$p14" "$p15" "$p16
    export stmt
    ./sel $p2 $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 $p11 $p12" "$p13" "$p14" "$p15" "$p16 
 else
    echo "No available connection, Database is closed, startup first"
 fi
}
rename () 
{
       mv $TABLESPACE/$p2.db $TABLESPACE/$p4.db
       mv $CATALOG/$p2.desc $CATALOG/$p4.desc
       mv $CATALOG/$p2.delim $CATALOG/$p4.delim
       echo "Processed."
}
copy () 
{
       cp $TABLESPACE/$p2.db $TABLESPACE/$p3.db
       cp $CATALOG/$p2.desc $CATALOG/$p3.desc
       cp $CATALOG/$p2.delim $CATALOG/$p3.delim
       echo "Copied."
}
drop () 
{
       rm $TABLESPACE/$p3.db
       rm $CATALOG/$p3.desc
       rm $CATALOG/$p3.delim
       echo "Table $p3 dropped."
}
commit () 
{
        for i in $(find $TABLESPACE  -name *.rollbackseg )
          do
           rm $i 
          done
     echo "commited."
}
rollback () 
{
     for i in $(find $TABLESPACE  -name *.rollbackseg )
      do
        tablename1=`echo $i|awk -F "." '{print $1".db"}'`
        cp $i $tablename1
        rm -rf $i 
      done
     echo "rollback complete." 
}
backup () 
{
    case $p2 in
       ALL|all)                           # FULL SYSTEM BACKUP
       BACKUPDIR=$p3
#       BACKUPFILE=`echo $p3"/STBSQL_FULL.tar"`
       BACKUPFILE=$p3"/STBSQL_FULL.tar"
echo $BACKUPDIR";"$BACKUPFILE
       tar -cvf  $BACKUPFILE  $RDIR       # Root directory'ideki STBSQL ve altındaki dosyaları backup directory'e tar yapar  
       echo ""
       cd $BACKUPDIR
       gzip $BACKUPFILE
       echo "Full Database Backup completed. Backup File:"$BACKUPFILE".gz"
    ;;
       tables)                            #FULL DATA BACKUP
         BACKUPDIR=$p3/.
         for i in $(find $TABLESPACE  -name "*.db" -print )
           do
            cp $i $BACKUPDIR 
           done
         for i in $(find $CATALOG  -name "*.delim" -print )
           do
            cp $i $BACKUPDIR 
           done
         for i in $(find $CATALOG  -name "*.desc" -print )
           do
            cp $i $BACKUPDIR 
           done
         for i in $(find $CATALOG  -name "*.user" -print )
           do
            cp $i $BACKUPDIR 
           done
         echo ""
         echo "Tables have been copied under "$BACKUPDIR
    ;;
    esac
}
startup () 
{
   LOGGEDUSER=`cat $SYS/loggeduser.user.$SESSIONID`                #login olan user
   SYSUSER=`cat $SYS/dba.user|grep -i $LOGGEDUSER|wc -l`           #DBA user
   if [ $SYSUSER = 0 ];then
      echo "$USER user has no DBA permission."
   else
      if ! [ -f $SYS/_system ];then                                # STARTUP 
           echo "DB is up and running, shutdown first before startup"
           cp $SYS/system $SYS/system.reco
      else
           mv $SYS/_system $SYS/system
           for i in `cat $SYS/system|awk '{ if ( substr($1,1,1) != "#" ) print $1;}'`
               do
                  if [ -f $i ];then
                     printf "%s ."
                  else
                     echo ""
                     echo "Object "$i" not found"
                     echo "ERROR:0002:Couldn't connect to STBSQL database..."
                     exit 1
                  fi
               done
               sleep 1
               echo "STBSQL database opened." 
       fi
   fi
}
stbsqlinitial () 
{
echo "STB*SQL Simple Text Data Base SQL Interface: Release 10.0.0.1 - Production on Feb 16 2014 "
echo
echo "Copyright (c) 2014,2016. All rights reserved."
}
DBConnectionCheck () 
{
printf "%sConnecting Simple Text Data Base: Release 10.0.0.1 - Production"
if ! [ -f $SYS/system ];then
     echo
     echo "STBSQL database is not up and running."
else
     for i in `cat $SYS/system|awk '{ if ($1 != "#") print $1;}'` # Check the system objects exist
      do
        if [ -f $BIN/$i ];then
           printf "%s."
            
        else
           echo ""
           echo "Object "$i" not found"
           echo "EROR:0001:Couldn't connect to STBSQL database..."
           exit 1
        fi
      done
fi
cd $BIN
./builtrepository
echo ""
sleep 1
echo "Connected."
}
############################
##
##          MAIN
##
############################
stbsqlinitial                  # stbsql uygulama giriş başlığı
Login                          # Login procedure
DBConnectionCheck              # DB connection check 
set -f
while true; do
    echo -n "SQL>";read _ALL
    _ALL=`echo $_ALL|sed -e 's/\*/_ALL/g'`
    p1=`echo $_ALL|awk -F " " '{print $1;}'`
    p2=`echo $_ALL|awk -F " " '{print $2;}'`
    p3=`echo $_ALL|awk -F " " '{print $3;}'`
    p4=`echo $_ALL|awk -F " " '{print $4;}'`
    p5=`echo $_ALL|awk -F " " '{print $5;}'`
    p6=`echo $_ALL|awk -F " " '{print $6;}'`
    p7=`echo $_ALL|awk -F " " '{print $7;}'`
    p8=`echo $_ALL|awk -F " " '{print $8;}'`
    p9=`echo $_ALL|awk -F " " '{print $9;}'`
    p10=`echo $_ALL|awk -F " " '{print $10;}'`
    p11=`echo $_ALL|awk -F " " '{print $11;}'`
    p12=`echo $_ALL|awk -F " " '{print $12;}'`
    echo $_ALL >> stbsql.hist.$SESSIONID
 if [ ! -f $SYS/loggeduser.user.$SESSIONID ];then
    echo "Your session is closed, you need to login to database"
    Login
 else
 p1=`echo $p1|tr '[:lower:]' '[:upper:]'`
 case ${p1:-"BOS"} in
     edit|EDIT ) ./edittable $p2                             #EDIT TABLE    (1)
	 ;;
     hist|HIST|history|HISTORY )                             #COMMAND HISTORY (2)
         cat stbsql.hist.$SESSIONID|tail -n 20
     ;;
     shutdown|SHUTDOWN ) shutdown                            # SHUTDOWN  DB (3)
     ;;
     startup|STARTUP ) startup                               #START DB   (4)
     ;;
     exit|quit|EXIT|QUIT )                                   # EXIT (5)
                ./cleanup             
                echo "Disconnecting STBSQL..."
                rm $SYS/loggeduser.user.$SESSIONID           # SESSION kapatılıyor
                rm $BIN/stbsql.hist.$SESSIONID               # History siliniyor
                sleep 2
                echo "Disconnected."
                exit
     ;;
     select|SELECT ) selectstatement                          # SELECT ANY TABLE (6)
     ;;  
     rename|RENAME ) rename                                   # RENAME (7)
     ;;
     copy|COPY|cp|CP )                                        # COPY (8)
                      copy 
     ;;
     drop|DROP )                                              # DROP (9)
                drop                                        
     ;; 
     delete|DELETE|del|DEL )                                  # DELETE (10)
                 ./del $p2 $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 $p11 $p12
     ;;
     update|UPDATE|upd|UPD )                                  # UPDATE (11)
                 ./update $p2 $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 $p11 $p12
     ;;
     ins|insert|INSERT|INS )                                  # INSERT (12)
                ./ins $p2 $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 $p11 $p12   
     ;;
     create|CREATE|cre|CRE )                                  # CREATE TABLE (13)
      case $p2 in
       table|TABLE )
                ./create $p2 $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 $p11 $p12
       ;;
       user|USER )                                            #CREATE USER  (14)
                ./adduser $p3 $p4 $p5 $p6
       ;;
      esac
     ;;
     alter|ALTER|alt|ALT )                                    # ALTER TABLE (15)
      case $p2 in
       table|TABLE )
               ./altertable $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 $p11 $p12
       ;;
       user|USER )                                            #ALTER USER   (16)
               ./altuser $p3 $p4 $p5 $p6 
       ;;
      esac
     ;;
     commit|COMMIT )                                          # COMMIT (17)
                    commit 
     ;;
     rollback|ROLLBACK )                                      # ROLLBACK (18)
                    rollback 
     ;;
     desc|DESC )                                              # DESC (19)
                 ./desc $p2
     ;;
     help|HELP ) 
                cat ./stbsql.help                             # HELP (20)
     ;;
     col|colw|columnwitdh|COL|COLW|COLUMNWITDH )              # COLUMNWITDH  (21)
                echo ${p2:-15} > ./columnwitdh
     ;;
     backup|BACKUP )                                          # BACKUP (22)
                    backup
     ;;
     spoolon|SPOOLON )                                        # SPOOL ON (23)
               usersplfile=/tmp/spool_$RANDOM.txt
               echo "Spool file name : $usersplfile"
               echo $usersplfile > spoolfile
     ;;
     spooloff|SPOOLOFF )                                      # SPOOL OFF (24)
               if [ -f spoolfile ];then
                   rm spoolfile
               fi
     ;;
     conn|connection|CON|CONNECTION ) 
               Login                   #LOGIN  (25)
     ;;
     grant|GRANT )                                            # GRANT ACCESS (26)
                ./grant $p2 $p3 $p4 $p5 $p6 $p7
     ;;
     revoke|REVOKE )                                          #REVOKE ACCESS (27)
                  ./revoke $p2 $p3 $p4 $p5 $p6 $p7
     ;;
     showuser|SHOWUSER )                                      # SHOW CURRENT USER (28)
                         echo "User      :"`cat $SYS/loggeduser.user.$SESSIONID`  
                         echo "Session Id:"`ls $SYS/loggeduser.user.$SESSIONID|awk -F "." '{ print $3 }'` # SESSION ID 
     ;; 
     showsession|SHOWSESSION )                                # SHOW ACTIVE SESSION ID and USER (29)
                                echo "Active Users and Sessions:"  
                                j=1
                                for i in $(find $SYS  -name "loggeduser.user.*" )
                                  do
                                   username=`cat $i`
                                   sess=`echo $i |awk -F "." '{ print $3 }'`
                                   echo $j";"$username";"$sess
                                   j=$((j+1))
                                  done
     ;; 
     dropuser|DROPUSER )                                      # DROP USER (30)
                  ./dropuser $p2
     ;; 
     *) if [ ${_ALL:-"~"} = "~" ];then 
            echo
        else
            echo "$_ALL : command not found."
        fi  
     ;;
  esac
 fi
done
exit 0
